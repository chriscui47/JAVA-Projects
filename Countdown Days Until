
//Fill in your name and student number
//Name: Christopher Cui
//Student Number: 260867703
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;


public class CountdownDays {
   public static void main(String[] args) { 

  }      
  
  
  
  
  public static String getCurrentDate() {
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");  
    LocalDateTime now = LocalDateTime.now();  
    return dtf.format(now);
  }
  
    //========================
    // Enter your code below
    
    public static String getSubstring(String s, int i, int j) {
      String newString = "";
      if (j<i){
        throw new IllegalArgumentException("Second integer must be larger than first");
      }
      else{
        for (int n=i;n<=j;n++){
          newString+= s.charAt(n);
        }
        
      }
      return newString;
      
      
    }
    //get Days by parsing the integer into string
    public static int getDay(String d){
      return Integer.parseInt(getSubstring(d,0,1));
      
      
    }
    public static int getMonth(String m){
      return Integer.parseInt(getSubstring(m,3,4));
      
    }
    public static int getYear(String y){
      return Integer.parseInt(getSubstring(y,6,9));
    }
    
    public static boolean isLeapYear(int year){
      //if divisable by 4 its leap year, and centuries have to be divisible by 400
      if ( (year%4==0) || (year%400==0) ){
        return true;
      }else{
        return false;
      }
    }
    public static int getDaysInAMonth(int month, int year){
      if (month==1){
        return 31;
      }
          // check if feb is leap year, if not its 29 days
      else if ( (month==2 && (isLeapYear(year) ))){
        return 29;
      }
      else if (month ==2 ){
        return 28;
      }


      else if (month==3){
        return 31;
      }
        
      else if (month==4){
        return 30;
      }
        
      else if (month==5){
        return 31;
      }
        
      else if (month==6){
        return 30;
      }
        
      else if (month==7){
        return 31;
      }
        
      else if (month==8){
        return 31;
      }
        
      else if (month==9){
        return 30;
      }
        
      else if (month==10){
        return 31;
      }
        
      else if (month==11){
        return 30;
      }
        
      else if (month==12){
        return 31;
      }
      return 0;
    }
    public static boolean dueDateHasPassed(String date1,String date2){
      //First compare the years, enter if statements if its earlier
      
      if ( getYear(date2) < getYear(date1) ){
        return true;
      }
      // if same year, compare months
      if(getYear(date2) == getYear(date1)){
        if (getMonth(date2)<getMonth(date1)){
          return true;
        }
        //if same month, compare days
        else if (getMonth(date2)==getMonth(date1)){
          
          if (getDay(date2)<getDay(date1)){
            return true;
          }
          else if (getDay(date2)==getDay(date1)){
            return true;
          }
        }
      }
      return false;
      
    }
   


    public static int countDaysLeft(String presentDate, String dueDate) {
//Due date passed causes method to return 0
      int daysUntill =0;
      
      if (dueDateHasPassed (presentDate, dueDate)) {
        return 0;
      }
      else {
        
//count number of days till current day from year 0
//every year has 365 years. But leap years will actually have 1 more day
//count number of leap years 
        int presentYear=getYear(presentDate);
        int completeYears=presentYear-1;
        int leapYearsAmount=0;
        for (int i=1; i<=completeYears;i++) {
          if (isLeapYear(i)) {
            leapYearsAmount++;
          }
        }
        
        
//each month has a different day. And depends whether part of leap year
        int presentMonth=getMonth(presentDate);
        int completeMonths=presentMonth-1;
        int daysCompleteMonths=0;
        for (int i=1; i<=completeMonths; i++) {
          daysCompleteMonths+=getDaysInAMonth(i, presentYear);
        }
        
        int currentDay=getDay(presentDate);
        
        int daysTilCurrent=completeYears*365+leapYearsAmount+daysCompleteMonths+currentDay;
        
        
        
//count number of days till due day from year 0
        int dueYear=getYear(dueDate);
        int completeYearsDue=dueYear-1;
        int leapYearsAmountDue=0;
        


        
        for (int i=1; i<=completeYearsDue;i++) {
          if (isLeapYear(i)) {
            leapYearsAmountDue++;
          }
        }
        
        int dueMonth=getMonth(dueDate);
        int fullMonthsDue=dueMonth-1;
        int daysFullMonthsDue=0;
        for (int i=1; i<=fullMonthsDue; i++) {
          daysFullMonthsDue+=getDaysInAMonth(i, dueYear);
        }
        int dueDay=getDay(dueDate);
        int daysTilDue=completeYearsDue*365
          +daysFullMonthsDue
          +dueDay
          +leapYearsAmountDue;
       
//number of days between due day and current day
        daysUntill=daysTilDue-daysTilCurrent;
      }
      return daysUntill;
    }
    public static void displayCountdown(String dueDate) {
     
     //current date using getCurrentDate
      String currentDate=getCurrentDate();
      
 //number of days left before due date using countDaysLeft
      
      int daysLeft=countDaysLeft(currentDate, dueDate);
      
     //display today's date, due date and 
     //either encouraging message (number of days left)
      
      System.out.println("Today is: "+currentDate);
      System.out.println("Due date: "+dueDate);
      if (daysLeft!=0) {
       System.out.println("You have " + daysLeft +" days left. I believe in you");
      }
      
      
      
      else {
       System.out.println("The due date has passed. Try next time");
      }
    }




}
